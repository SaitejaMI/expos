//get current process ID
alias PID R0;
PID = [SYSTEM_STATUS_TABLE+1];

multipush(BP);

//saving current process state in process table
alias process_entry R1;
process_entry = PROCESS_TABLE + 16*PID;

[process_entry+12] = SP%512;
[process_entry+14] = PTBR;
[process_entry+15] = PTLR;

//process switching

alias newID R4;

newID = PID;

while(1==1) do
 newID = (newID + 1)%16;

 if(newID==PID) then
  newID = 0;	//idle
  break;
 endif;

 if(newID==0) then
  continue;
 endif;

 if([PROCESS_TABLE+16*newID+4]==CREATED) then
  break;
 endif;

 if([PROCESS_TABLE+16*newID+4]==READY) then
  break;
 endif;

endwhile;

if(PID==0) then
 if(newID==0) then
  halt;
 endif;
endif;

//restoring other scheduled process state
alias new_pro_entry R6;
new_pro_entry = PROCESS_TABLE + 16*(newID);


SP = ([new_pro_entry + 11]*512) + [new_pro_entry + 12];

PTBR = [new_pro_entry + 14];
PTLR = [new_pro_entry + 15];

[SYSTEM_STATUS_TABLE + 1] = newID;

if( [new_pro_entry + 4] == CREATED )	then

	SP = [new_pro_entry + 13];
	BP = [[new_pro_entry + 11]*512];

	[new_pro_entry + 4] = RUNNING;
	[new_pro_entry + 9] = 0;

	ireturn;

endif;

[new_pro_entry + 4] = RUNNING;

multipop(BP);

return;
