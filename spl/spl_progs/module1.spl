//PROCESS MANAGER MODULE
alias funNum R1;
alias curID R2;

if(funNum == 2)	then
	alias userAreaPageNo R3;
	userAreaPageNo = [PROCESS_TABLE + (16*curID) + 11];

	backup;
	R1 = 2;
	R2 = userAreaPageNo;
	call MOD_2;
	restore;

	return;
endif;

if(funNum == 3)	then
	backup;
	R1 = 4;
	R2 = curID;
	call MOD_1;
	restore;

	backup;
	R1 = 2;
	R2 = curID;
	call MOD_1;
	restore;

	[PROCESS_TABLE + (16*curID) + 4] = 4;
	return;
endif;

if(funNum == 4)	then
	PTBR = PAGE_TABLE_BASE + (20*curID);

	[PTBR + 0] = -1;
	[PTBR + 1] = "0000";

	[PTBR + 2] = -1;
	[PTBR + 3] = "0000";

	alias i R4;
	i = 4;
	while(i <= 19)	do
		if([PTBR + i] != -1)	then
			backup;
			R1 = 2;
			R2 = [PTBR + i];
			call MOD_2;
			restore;

			[PTBR + i] = -1;
			[PTBR + i + 1] = "0000";
		endif;
		i = i + 2;
	endwhile;

        alias diskMap R5;
        diskMap = DISK_MAP_TABLE + 10*curID;

        //removing blocks using disk map table
        while(i<10) do
                if(([diskMap+i]!=-1)&&((i==2)||(i==3)||(i==8)||(i==9))) then
                backup;

                R1 = 4;
                R2 = [diskMap +i];

                call MOD_2;

                restore;
                endif;
                [diskMap + i] = -1;
                i=i+1;
        endwhile;
	return;
endif;

if(funNum == 1) then
        alias i R3;
        i=0;
        while(i<16) do
                if([PROCESS_TABLE + 16*i +4]== 4) then
                        [PROCESS_TABLE + 16*i + 1] = i; //PID
                        [PROCESS_TABLE + 16*i + 4] = 12; //STATE
                        [PROCESS_TABLE + 16*i +14] = PAGE_TABLE_BASE + 20*i;//PTBR
                        [PROCESS_TABLE + 16*i + 15] = 10; //PTLR
                        break;
                endif;
                i=i+1;
        endwhile;

        if(i == 16) then
                R0 = -1;
        else
                R0 = i;
        endif;

        return;
endif;
